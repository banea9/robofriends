{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","containers/ErrorBoundry/ErrorBoundry.js","components/Header/Header.js","containers/App/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","filteredRobots","map","robot","key","SearchBox","onInputChange","onChange","type","placeholder","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","Header","nextProps","nextState","console","log","App","onRequestRobots","searchField","onSearchChange","robots","isPending","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","resp","json","data","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.904a1601.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc pointer br2 bg-light-green dib pa3 ma2 grow bw2 shadow-5 \">\n      <img src={`https://robohash.org/${id}`} alt=\"robot\" />\n      <h3>{name}</h3>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\n\nconst CardList = ({ filteredRobots }) => {\n  return (\n    <div className=\"mt4\">\n      {filteredRobots.map(robot => {\n        return (\n          <Card\n            key={robot.id}\n            id={robot.id}\n            name={robot.name}\n            email={robot.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ onInputChange }) => {\n  return (\n    <div className=\"pa\">\n      <input\n        onChange={onInputChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robot\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport './Scroll.css'\nconst Scroll = props => {\n  return <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render () {\n        if(this.state.hasError) {\n            return <h1>Oooops. That is not good!</h1>\n        } \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\nimport \"./Header.css\";\nclass Header extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    console.log(\"header\");\n    return (\n      <div>\n        <h1>Robofriends</h1>\n      </div>\n    );\n  }\n}\nexport default Header;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../../components/CardList/CardList\";\nimport SearchBox from \"../../components/SearchBox/SearchBox\";\nimport Scroll from \"../../components/Scroll/Scroll\";\nimport ErrorBoundary from \"../ErrorBoundry/ErrorBoundry\";\nimport Header from '../../components/Header/Header'\nimport \"./App.css\";\nimport { setSearchField, requestRobots } from \"../../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  };\n};\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    if (isPending) {\n      return <h1>Loading robots...</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <Header />\n          <SearchBox onInputChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList filteredRobots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\nimport { REQUEST_ROBOTS_PENDING } from \"./constants\";\nimport { REQUEST_ROBOTS_SUCCESS } from \"./constants\";\nimport { REQUEST_ROBOTS_FAILED } from \"./constants\";\n\nexport const setSearchField = text => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  };\n};\n\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(resp => resp.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\nimport { REQUEST_ROBOTS_PENDING } from \"./constants\";\nimport { REQUEST_ROBOTS_SUCCESS } from \"./constants\";\nimport { REQUEST_ROBOTS_FAILED } from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\"\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport \"./robots\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}