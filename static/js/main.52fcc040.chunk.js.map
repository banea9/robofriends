{"version":3,"sources":["components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","containers/ErrorBoundry/ErrorBoundry.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","filteredRobots","map","robot","key","SearchBox","onInputChange","onChange","type","placeholder","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","e","searchField","target","value","robots","fetch","then","resp","json","data","catch","err","console","log","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wSAYeA,EAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,gEACb,yBAAKC,IAAG,+BAA0BJ,GAAMK,IAAI,UAC5C,4BAAKJ,GACL,2BAAIC,KCcKI,EAlBE,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAElB,OACE,yBAAKJ,UAAU,OACZI,EAAeC,KAAI,SAAAC,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAMT,GACXA,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,aCEVS,EAbG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,OACE,yBAAKT,UAAU,MACb,2BACEU,SAAUD,EACVT,UAAU,mCACVW,KAAK,SACLC,YAAY,mBCHLC,G,MAJA,SAAAC,GACb,OAAO,yBAAKd,UAAU,UAAUc,EAAMC,YCkBzBC,E,kDAlBX,WAAYF,GAAQ,IAAD,8BACf,gBACKG,MAAQ,CACTC,UAAW,GAHA,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGzB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKP,MAAMC,a,GAfEQ,IAAMC,WC6CnBC,G,wDAxCb,aAAe,IAAD,8BACZ,gBAcFhB,cAAgB,SAAAiB,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAEE,OAAOC,SAdtC,EAAKZ,MAAQ,CACXU,YAAa,GACbG,OAAQ,IAJE,E,gEAOO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CAAEQ,OAAQK,OAEzBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAKpB,IAAD,EACyBhB,KAAKJ,MAA7Ba,EADD,EACCA,OAAQH,EADT,EACSA,YACVvB,EAAiBiB,KAAKJ,MAAMa,OAAOU,QAAO,SAAAlC,GAAK,OACnDA,EAAMR,KAAK2C,cAAcC,SAASf,EAAYc,kBAEhD,OAAsB,IAAlBX,EAAOa,OACF,iDAGL,yBAAK3C,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWS,cAAeY,KAAKZ,gBAC/B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUL,eAAgBA,W,GAjCtBmB,IAAMC,YCMJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAjB,GACLmB,QAAQnB,MAAMA,EAAMuC,c","file":"static/js/main.52fcc040.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc pointer br2 bg-light-green dib pa3 ma2 grow bw2 shadow-5 \">\n      <img src={`https://robohash.org/${id}`} alt=\"robot\" />\n      <h3>{name}</h3>\n      <p>{email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\n\nconst CardList = ({ filteredRobots }) => {\n  \n  return (\n    <div className=\"mt4\">\n      {filteredRobots.map(robot => {\n        return (\n          <Card\n            key={robot.id}\n            id={robot.id}\n            name={robot.name}\n            email={robot.email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ onInputChange }) => {\n  return (\n    <div className=\"pa\">\n      <input \n        onChange={onInputChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robot\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport './Scroll.css'\nconst Scroll = props => {\n  return <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n    render () {\n        if(this.state.hasError) {\n            return <h1>Oooops. That is not good!</h1>\n        } \n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\nimport CardList from \"../../components/CardList/CardList\";\nimport SearchBox from \"../../components/SearchBox/SearchBox\";\nimport Scroll from \"../../components/Scroll/Scroll\";\nimport ErrorBoundary from \"../ErrorBoundry/ErrorBoundry\";\nimport \"./App.css\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      searchField: \"\",\n      robots: []\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(resp => resp.json())\n      .then(data => {\n        this.setState({ robots: data });\n      })\n      .catch(err => console.log(err));\n  }\n  onInputChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = this.state.robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    if (robots.length === 0) {\n      return <h1>Loading robots...</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1>Robofriends</h1>\n          <SearchBox onInputChange={this.onInputChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList filteredRobots={filteredRobots} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './robots';\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}